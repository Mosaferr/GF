<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use App\Models\UserDate;
use App\Models\Client;
use App\Http\Controllers\ReceiptController;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\App;

class PaymentSuccessController extends Controller
{
    public function handleSuccess()
    {
        Log::info("üîç WEJ≈öCIE do PaymentSuccessController::handleSuccess()");

        $user = Auth::user(); // Pobranie zalogowanego u≈ºytkownika

        if (!$user) {
            return redirect()->route('home')->with('error', 'Musisz byƒá zalogowany, aby kontynuowaƒá.');
        }

        // Pobranie lidera (g≈Ç√≥wnego klienta)
        $leader = $user->clients->first();

        if (!$leader) {
            Log::error("‚ùå Brak powiƒÖzanego klienta dla user_id: {$user->id}");
            return redirect()->route('home')->with('error', 'Brak powiƒÖzanego klienta.');
        }

        Log::info("üîç Sprawdzam status p≈Çatno≈õci: {$leader->stage}");

        // 1Ô∏è‚É£ Je≈õli u≈ºytkownik zap≈Çaci≈Ç tylko zaliczkƒô, przekierowujemy do Payment2Controller
        if ($leader->stage === 'przedp≈Çacone') {
            return redirect()->route('service.payment2')->with('alert', 'Zaliczka zatwierdzona. Teraz dokonaj dop≈Çaty.');
        }

        // 2Ô∏è‚É£ Je≈õli u≈ºytkownik zap≈Çaci≈Ç ca≈Ço≈õƒá lub dop≈Çaci≈Ç do pe≈Çnej kwoty, sprawdzamy, czy rachunek zosta≈Ç wys≈Çany
        if ($leader->stage === 'op≈Çacone') {
            Log::info("üîç Sprawdzam sesjƒô: receipt_sent = " . (session('receipt_sent') ? 'TRUE' : 'FALSE'));

        // Sprawdzenie, czy mail nie zosta≈Ç ju≈º wys≈Çany
            if (!session()->has('receipt_sent')) {
                // Pobranie `date_id` u≈ºytkownika
                $dateId = UserDate::where('user_id', $user->id)->latest()->value('date_id');

                if ($dateId) {
                    Log::info("üîç PRZED wywo≈Çaniem sendReceiptEmail dla dateId: {$dateId}");
                    // Wys≈Çanie maila z rachunkiem
                    app(ReceiptController::class)->sendReceiptEmail($dateId);
                    Log::info("‚úÖ PO wywo≈Çaniu sendReceiptEmail dla dateId: {$dateId}");

                    // Ustawienie flagi w sesji, aby zapobiec ponownej wysy≈Çce
                    session(['receipt_sent' => true]);
                } else {
                    Log::error("‚ùå B≈ÇƒÖd: Nie znaleziono poprawnego dateId dla u≈ºytkownika.");
                }
            } else {
                Log::info("‚úÖ Email z rachunkiem zosta≈Ç ju≈º wys≈Çany, pomijam ponownƒÖ wysy≈Çkƒô.");
            }

            // Przekierowanie do FinalController
            return redirect()->route('service.final');
        }

        // Je≈õli status jest inny ni≈º 'przedp≈Çacone' lub 'op≈Çacone', co≈õ posz≈Ço nie tak
        Log::error("‚ùå Nieprawid≈Çowy status p≈Çatno≈õci: {$leader->stage} dla user_id: {$user->id}");
        return redirect()->route('service.payment')->with('error', 'Nieprawid≈Çowy etap p≈Çatno≈õci.');
    }
}
